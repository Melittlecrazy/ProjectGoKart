//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/newInputSystem/driving.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Driving : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Driving()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""driving"",
    ""maps"": [
        {
            ""name"": ""Drive"",
            ""id"": ""ee71f81d-0c52-48fd-93c6-c0df4061f638"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""7e1f315d-99fd-4615-8130-4275eb10cb32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""48ccca87-db6c-4eab-8e33-be81270794c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turning"",
                    ""type"": ""Value"",
                    ""id"": ""cd172ec5-ef02-4fc8-8ea1-616b60d01c35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f392d8d6-7982-4a8a-8e62-61e042a09a27"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82d5e91f-fd2c-4fae-80b0-107f383a2eb3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e818cb51-f422-4597-b353-19ee89dc2ede"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e5a1301c-c821-49ba-9161-f55157706b6d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4acb3bdc-02b2-44ee-986d-ec4f384232ac"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drive
        m_Drive = asset.FindActionMap("Drive", throwIfNotFound: true);
        m_Drive_Forward = m_Drive.FindAction("Forward", throwIfNotFound: true);
        m_Drive_Backward = m_Drive.FindAction("Backward", throwIfNotFound: true);
        m_Drive_Turning = m_Drive.FindAction("Turning", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drive
    private readonly InputActionMap m_Drive;
    private IDriveActions m_DriveActionsCallbackInterface;
    private readonly InputAction m_Drive_Forward;
    private readonly InputAction m_Drive_Backward;
    private readonly InputAction m_Drive_Turning;
    public struct DriveActions
    {
        private @Driving m_Wrapper;
        public DriveActions(@Driving wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Drive_Forward;
        public InputAction @Backward => m_Wrapper.m_Drive_Backward;
        public InputAction @Turning => m_Wrapper.m_Drive_Turning;
        public InputActionMap Get() { return m_Wrapper.m_Drive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveActions set) { return set.Get(); }
        public void SetCallbacks(IDriveActions instance)
        {
            if (m_Wrapper.m_DriveActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnBackward;
                @Turning.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnTurning;
                @Turning.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnTurning;
                @Turning.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnTurning;
            }
            m_Wrapper.m_DriveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @Turning.started += instance.OnTurning;
                @Turning.performed += instance.OnTurning;
                @Turning.canceled += instance.OnTurning;
            }
        }
    }
    public DriveActions @Drive => new DriveActions(this);
    public interface IDriveActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnTurning(InputAction.CallbackContext context);
    }
}
