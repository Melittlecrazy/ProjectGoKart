//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Movement/Drivng.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Drivng : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Drivng()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Drivng"",
    ""maps"": [
        {
            ""name"": ""Drive"",
            ""id"": ""4839d62c-33e3-4a16-9b31-a77d15992660"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""ffa01fb6-c9fc-43fe-bb39-13a374553697"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DriveForward"",
                    ""type"": ""Button"",
                    ""id"": ""02053c10-201d-40ec-a815-b57847cb19b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DriveBackward"",
                    ""type"": ""Button"",
                    ""id"": ""96b59f82-52fc-4b36-a0ed-d1a2838b7f35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""60c4d08d-d0fc-444d-af7c-e583eed7b90d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fafa968-5b70-4a24-9691-39494b0d3373"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32475bc0-9765-4e9d-98e2-8acce507bb66"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70f01d33-5e0e-4a5e-b7cc-c207dc8772fb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drive
        m_Drive = asset.FindActionMap("Drive", throwIfNotFound: true);
        m_Drive_Turn = m_Drive.FindAction("Turn", throwIfNotFound: true);
        m_Drive_DriveForward = m_Drive.FindAction("DriveForward", throwIfNotFound: true);
        m_Drive_DriveBackward = m_Drive.FindAction("DriveBackward", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drive
    private readonly InputActionMap m_Drive;
    private IDriveActions m_DriveActionsCallbackInterface;
    private readonly InputAction m_Drive_Turn;
    private readonly InputAction m_Drive_DriveForward;
    private readonly InputAction m_Drive_DriveBackward;
    public struct DriveActions
    {
        private @Drivng m_Wrapper;
        public DriveActions(@Drivng wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_Drive_Turn;
        public InputAction @DriveForward => m_Wrapper.m_Drive_DriveForward;
        public InputAction @DriveBackward => m_Wrapper.m_Drive_DriveBackward;
        public InputActionMap Get() { return m_Wrapper.m_Drive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveActions set) { return set.Get(); }
        public void SetCallbacks(IDriveActions instance)
        {
            if (m_Wrapper.m_DriveActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnTurn;
                @DriveForward.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnDriveForward;
                @DriveForward.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnDriveForward;
                @DriveForward.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnDriveForward;
                @DriveBackward.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnDriveBackward;
                @DriveBackward.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnDriveBackward;
                @DriveBackward.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnDriveBackward;
            }
            m_Wrapper.m_DriveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @DriveForward.started += instance.OnDriveForward;
                @DriveForward.performed += instance.OnDriveForward;
                @DriveForward.canceled += instance.OnDriveForward;
                @DriveBackward.started += instance.OnDriveBackward;
                @DriveBackward.performed += instance.OnDriveBackward;
                @DriveBackward.canceled += instance.OnDriveBackward;
            }
        }
    }
    public DriveActions @Drive => new DriveActions(this);
    public interface IDriveActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnDriveForward(InputAction.CallbackContext context);
        void OnDriveBackward(InputAction.CallbackContext context);
    }
}
